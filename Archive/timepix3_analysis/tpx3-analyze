#! /bin/env python3
import itertools
import platform
import argparse
import time
import glob

import tpx3_analysis.standard_layouts as SL
import tpx3_analysis.threaded_sort as TS
from  tpx3_analysis import Converter

def _printInfo(startTime, converter):
    print(('-'*50) + '\n'
        f'File:\t\t{converter.getCurrentFile()}\n'
        f'Hits:\t\t{float(converter.getHitsWritten()):.3e}\n'
        f'TDC\'s:\t\t{converter.getTDCsWritten()}\n'
        f'Frame:\t\t{converter.getCurrentFrameIndex()}\n'
        f'Performance:\t{converter.getHitsWritten()/1e6/(time.time() - startTime):.1f} MHits/s')
        #'------------------------------------------------------\n'
        #f'Read:\t\t{readMB:.2f} MB\tthroughput: {readMB/readTime:.2f} MB/s,\tdone: {readDone}\n'
        #f'Sorted:\t\t{sorterMB:.2f} MB\tthroughput: {sorterMB/sortTime:.2f} MB/s, \tinput queue: {converter.sorter.input_q.qsize()}\n'
        #f'Unpacked:\t{unpackingMB:.2f} MB\tthroughput: {unpackingMB/unpackingTime:.2f} MB/s,\tinput queue: {converter.unpacker.input_q.qsize()}\n'
        #f'Written:\t{writtenMB:.2f} MB\tthroughput: {writtenMB/writtenTime:.2f} MB/s,\tinput queue: {converter.hdf_file.input_q.qsize()}')

# https://stackoverflow.com/questions/27433316/how-to-get-argparse-to-read-arguments-from-a-file-with-an-option-rather-than-pre
class LoadFromFile (argparse.Action):
    def __call__ (self, parser, namespace, values, option_string = None):
        with values as f:
            # parse arguments in the file and store them in the target namespace
            parser.parse_args(f.read().split(), namespace)

if __name__ == "__main__":
    
    parser = argparse.ArgumentParser(prog='tpx-to-hdf', description="Convert Tpx3 raw data files to HDF5.")
    
    parser.add_argument('-o', dest='output_file', default='out.hdf5', help="output file to write the HDF5 data to")
    parser.add_argument('--layout', choices=['quad', 'single'], required=True, help="Use this standard board layout")
    parser.add_argument('--cluster', dest='cluster', action='store_true', help="Cluster the hits and add cluster_index to HDF file")
    parser.add_argument('--args-file',  type=open, action=LoadFromFile, help="Read command line arguments from the given file")
    parser.add_argument('--keep-filename-order', dest='keep_filename_order', action='store_true',
        help="The filenames need to be processed in the right order for the conversion to work correctly. By default "
        "the filenames are processed in lexicographic order, since this gives the right result for filenames containing frame numbers."
        " If you want to process the files exactly in the order presented on the command line, use this option.")
    parser.add_argument('--toa-diff', dest='toa_diff', type=float, default=5, help="Set maximum TOA difference allowed within a cluster (us)")
    parser.add_argument('--gaps', dest='gaps', type=int, default=2, help="Set the gap between chips to this number of pixels")
    parser.add_argument('--cluster-square-size', dest='cluster_square_size', type=int, default=8,
        help="To perform clustering, the sensor area is divided in squares to spatially divide the hits. The square can at most hold"
        " one active cluster. The default value of the cluster square size is 8, which divides the sensor area in squares of 8x8 pixels."
        " This value should be slightly bigger than the largest expected cluster (so for spherical clusters just larger than the largest diameter).")
    parser.add_argument('files', metavar='raw-file', action='extend', nargs='*')
    
    args = parser.parse_args()
    
    if args.layout == 'quad':
        boardLayout = SL.quadLayout
    elif args.layout == 'single':
        boardLayout = SL.singleLayout
    else:
        raise ValueError('Board layout supplied could not be understood, should be either \'single\' or \'quad\'')
         
    # Wildcard expansion
    files_ = list(itertools.chain(*[glob.glob(f) for f in args.files]))
      
    if not args.keep_filename_order:
        files_ = sorted(files_)
     
    if not len(files_):
        print('No files to convert.')
        exit(0)
     
    conv = Converter(files_, args.output_file, boardLayout, gaps=args.gaps,
                                                            clusterSquareSize=args.cluster_square_size,
                                                            maxTOADiff=args.toa_diff,
                                                            cluster=args.cluster)
     
    print(f'Compilation:\t{conv.compilationTime:.2f} s')
    
    startTime = time.time()
     
    while conv.is_alive():
         
        if conv.has_crashed():
            print('Error: one of the threads died unexpectedly')
            conv.stop()
            exit(1) 
        
        conv.join(1)
        _printInfo(startTime, conv)
     
    print(f'Finished:\t{time.time()-startTime:.2f} s')



