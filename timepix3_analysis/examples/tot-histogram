#! /bin/env python3

import sys
import math
import argparse

import h5py
from numba import njit
import numpy as np

import matplotlib.pyplot as plt

parser = argparse.ArgumentParser(prog='tot-histogram.py', description="Calculate TOT histogram from HDF5 file")
parser.add_argument('--frame', dest='frame_index', type=int, default=-1, help="Calculate TOT histogram only of this frame. If left unspecificed the TOF histograms of all frames are summed")
parser.add_argument('--max', dest='max', type=int, default=25575, help="Max TOT value of the histogram (ns)")
parser.add_argument('hdf_file')
args = parser.parse_args()

BLOCK_SIZE = int(2e7)

f = h5py.File(args.hdf_file, "r")

tot = f["tot"]
frame = f["frame_number"]

bin_edges = np.arange(0, args.max, 25)
histogram_sum = np.zeros(bin_edges.size - 1)

for idx in range(0, len(tot), BLOCK_SIZE):
        
    tot_block = tot[idx:idx+BLOCK_SIZE]
    
    if args.frame_index != -1:
        frame_block = frame[idx:idx+BLOCK_SIZE]
        tot_block = tot_block[frame_block == args.frame_index]
     
    histogram, _ = np.histogram(tot, bins=bin_edges)
    
    histogram_sum += histogram
    print('%.1f %%\r' % (idx / len(tot) * 100), end='')

plt.figure()
# Trick to plot histogram of already binned data,
# see documentation of plt.hist function.
# Also convert picoseconds to seconds
plt.title('Time over threshold')
plt.xlabel('Time (ns)')
plt.ylabel('Counts')

plt.hist(bin_edges[:-1], bin_edges, weights=histogram)
plt.xlim(0, args.max)
plt.show()

