#! /bin/env python3
import argparse

import h5py
import numpy as np
from numba import njit

import matplotlib.pyplot as plt

parser = argparse.ArgumentParser(prog='cluster-delta-toa', description="Plot a histogram of the difference of the maximum TOA value in a cluster and the minimum TOA value")
parser.add_argument('--bin-size', dest='bin_size', type=float, default=100, help="Size of the histogram bins in ns")
parser.add_argument('--log', dest='log', action='store_true', help="Use a logarithmic scale for the y-axis")
parser.add_argument('--bins', dest='bins', type=int, default=100, help="Number of bins")
parser.add_argument('hdf_file')
args = parser.parse_args()

BLOCK_SIZE = int(11e6)

HISTOGRAM_BLOCK_SIZE = int(50e6)

f = h5py.File(args.hdf_file, "r")

cluster_index = f['cluster_index']
toa = f['toa']

@njit
def update_range(cluster_block, start_idx, toa_block, toa_low, toa_high):
    end_of_block = False
    
    for idx, toa in zip(cluster_block, toa_block):
        
        arr_idx = idx - start_idx
        
        if 0 <= arr_idx < HISTOGRAM_BLOCK_SIZE:
            toa_low[arr_idx] = min(toa, toa_low[arr_idx]) if toa_low[arr_idx] != 0 else toa
            toa_high[arr_idx] = max(toa, toa_high[arr_idx])
        elif arr_idx >= HISTOGRAM_BLOCK_SIZE:
            end_of_block = True
     
    return end_of_block

start_idx = 1
toa_low = np.zeros(HISTOGRAM_BLOCK_SIZE, np.uint64)
toa_high = np.zeros(HISTOGRAM_BLOCK_SIZE, np.uint64)

bin_edges = np.linspace(0, args.bin_size * 1e3 * args.bins, args.bins + 1)
histogram = np.zeros(args.bins)

hdf_idx = 0

while hdf_idx < len(toa):
        
    cluster_block = cluster_index[hdf_idx:hdf_idx+BLOCK_SIZE]
    toa_block = toa[hdf_idx:hdf_idx+BLOCK_SIZE]
    
    if update_range(cluster_block, start_idx, toa_block, toa_low, toa_high):
        # Reached end of cluster block
        histogram += np.histogram((toa_high - toa_low)[toa_low != 0], bins=bin_edges)[0]
        start_idx += HISTOGRAM_BLOCK_SIZE
        
        toa_low = np.zeros(HISTOGRAM_BLOCK_SIZE, np.uint64)
        toa_high = np.zeros(HISTOGRAM_BLOCK_SIZE, np.uint64)
    else:
        hdf_idx += BLOCK_SIZE

histogram += np.histogram((toa_high - toa_low)[toa_low != 0], bins=bin_edges)[0]

plt.figure()
plt.title('Highest TOA minus lowest TOA in cluster')
plt.xlabel('Difference (ns)')
plt.ylabel('Counts')
if args.log:
    plt.yscale('log')
plt.bar(np.arange(1, args.bins) * args.bin_size, histogram[1:], width=args.bin_size, align='edge')
plt.show()



